- return unless License.feature_available?(:elastic_search)

- recreate_index_url = help_page_url('integration/elasticsearch.md')
- recreate_index_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: recreate_index_url }
- recreate_index_text = s_("Changes won't take place until the index is %{link_start}recreated%{link_end}.").html_safe % { link_start: recreate_index_link_start, link_end: '</a>'.html_safe }
- expanded = integration_expanded?('elasticsearch_')

%section.settings.as-elasticsearch.no-animate#js-elasticsearch-settings{ class: ('expanded' if expanded), data: { qa_selector: 'elasticsearch_tab' } }
  .settings-header
    %h4
      = _('Advanced Search')
    %button.btn.gl-button.js-settings-toggle{ type: 'button' }
      = expanded ? 'Collapse' : 'Expand'
    %p
      = _('Advanced Search with Elasticsearch')
  .settings-content
    = form_for @application_setting, url: general_admin_application_settings_path(anchor: 'js-elasticsearch-settings'), html: { class: 'fieldset-form' } do |f|
      = form_errors(@application_setting) if expanded

      %fieldset
        .sub-section
          .form-group
            .form-check
              = f.check_box :elasticsearch_indexing, class: 'form-check-input', data: { qa_selector: 'indexing_checkbox' }
              = f.label :elasticsearch_indexing, class: 'form-check-label' do
                = _('Elasticsearch indexing')
              - unless Gitlab::CurrentSettings.elasticsearch_indexing?
                .form-text.text-muted
                  = _('An empty index will be created if one does not already exist')
              - if Gitlab::CurrentSettings.elasticsearch_indexing?
                .form-text
                  = link_to _('Index all projects'), admin_elasticsearch_enqueue_index_path,
                      class: ['btn', 'btn-success'], method: :post

          .card-body
            .form-group
              .form-check
                - disable_checkbox = !Gitlab::CurrentSettings.elasticsearch_indexing? || Elastic::DataMigrationService.pending_migrations?
                = f.check_box :elasticsearch_pause_indexing, class: 'form-check-input', data: { qa_selector: 'pause_checkbox' }, disabled: disable_checkbox
                = f.label :elasticsearch_pause_indexing, class: 'form-check-label' do
                  = _('Pause Elasticsearch indexing')
                .form-text.text-muted
                  = _('Changes are still tracked. Useful for cluster/index migrations.')
                - if Elastic::DataMigrationService.pending_migrations?
                  .form-text.text-warning
                    = _('There are pending advanced search migrations. This setting is disabled.')

          .form-group
            .form-check
              = f.check_box :elasticsearch_search, class: 'form-check-input', data: { qa_selector: 'search_checkbox' }
              = f.label :elasticsearch_search, class: 'form-check-label' do
                Search with Elasticsearch enabled

          .form-group
            = f.label :elasticsearch_url, 'URL', class: 'label-bold'
            = f.text_field :elasticsearch_url, value: @application_setting.elasticsearch_url.join(', '), class: 'form-control', placeholder: 'http://localhost:9200', data: { qa_selector: 'url_field' }
            .form-text.text-muted
              = _('The URL to use for connecting to Elasticsearch. Use a comma-separated list to support clustering (e.g., "http://localhost:9200, http://localhost:9201").')

          .form-group
            = f.label :elasticsearch_shards, _('Number of Elasticsearch shards'), class: 'label-bold'
            = f.number_field :elasticsearch_shards, value: @application_setting.elasticsearch_shards, class: 'form-control'
            .form-text.text-muted
              = _('How many shards to split the Elasticsearch index over.')
              = recreate_index_text

          .form-group
            = f.label :elasticsearch_replicas, _('Number of Elasticsearch replicas'), class: 'label-bold'
            = f.number_field :elasticsearch_replicas, value: @application_setting.elasticsearch_replicas, class: 'form-control'
            .form-text.text-muted
              = _('How many replicas each Elasticsearch shard has.')
              = recreate_index_text

          .form-group
            = f.label :elasticsearch_indexed_file_size_limit_kb, _('Maximum file size indexed (KiB)'), class: 'label-bold'
            = f.number_field :elasticsearch_indexed_file_size_limit_kb, value: @application_setting.elasticsearch_indexed_file_size_limit_kb, class: 'form-control'
            .form-text.text-muted
              = _('Any files larger than this limit will not be indexed, and thus will not be searchable.')

          .form-group
            = f.label :elasticsearch_indexed_field_length_limit, _('Maximum field length'), class: 'label-bold'
            = f.number_field :elasticsearch_indexed_field_length_limit, value: @application_setting.elasticsearch_indexed_field_length_limit, class: 'form-control'
            .form-text.text-muted
              = _('If any indexed field exceeds this limit it will be truncated to this number of characters and the rest will not be indexed or searchable. This does not apply to repository and wiki indexing. Setting this to 0 means it is unlimited.')

          .form-group
            = f.label :elasticsearch_max_bulk_size_mb, _('Maximum bulk request size (MiB)'), class: 'label-bold'
            = f.number_field :elasticsearch_max_bulk_size_mb, value: @application_setting.elasticsearch_max_bulk_size_mb, class: 'form-control'
            .form-text.text-muted
              = _('Maximum size of Elasticsearch bulk indexing requests.')
              = _('This only applies to repository indexing operations.')

          .form-group
            = f.label :elasticsearch_max_bulk_concurrency, _('Bulk request concurrency'), class: 'label-bold'
            = f.number_field :elasticsearch_max_bulk_concurrency, value: @application_setting.elasticsearch_max_bulk_concurrency, class: 'form-control'
            .form-text.text-muted
              = _('Maximum concurrency of Elasticsearch bulk requests per indexing operation.')
              = _('This only applies to repository indexing operations.')

          .form-group
            = f.label :elasticsearch_client_request_timeout, _('Client request timeout'), class: 'label-bold'
            = f.number_field :elasticsearch_client_request_timeout, value: @application_setting.elasticsearch_client_request_timeout, class: 'form-control'
            .form-text.text-muted
              = _('Elasticsearch HTTP client timeout value in seconds.')
              = _('Setting this to 0 means using the system default timeout value.')

        .sub-section
          %h4= _('Elasticsearch zero-downtime reindexing')
          = link_to _('Trigger cluster reindexing'), admin_elasticsearch_trigger_reindexing_path, class: 'gl-button btn btn-primary', data: { confirm: _('Are you sure you want to reindex?') }, method: :post, disabled: @elasticsearch_reindexing_task&.in_progress?
          .form-text.text-muted
            = _('This feature should be used with an index that was created after 13.0')
          - Elastic::ReindexingTask.old_indices_scheduled_for_deletion.each do |task|
            .form-text.text-danger
              = _("Unused, previous index '%{index_name}' will be deleted after %{time} automatically.") % { index_name: task.index_name_from, time: task.delete_original_index_at }
              = link_to _('Cancel index deletion'), admin_elasticsearch_cancel_index_deletion_path(task_id: task.id), method: :post
          - if @elasticsearch_reindexing_task
            - expected_documents = @elasticsearch_reindexing_task.documents_count
            - processed_documents = @elasticsearch_reindexing_task.documents_count_target
            %h5= _('Reindexing status')
            %p= _('State: %{last_reindexing_task_state}') % { last_reindexing_task_state: @elasticsearch_reindexing_task.state }
            - if @elasticsearch_reindexing_task.elastic_task
              %p= _('Task ID: %{elastic_task}') % { elastic_task: @elasticsearch_reindexing_task.elastic_task }
            - if @elasticsearch_reindexing_task.error_message
              %p= _('Error: %{error_message}') % { error_message: @elasticsearch_reindexing_task.error_message }
            - if expected_documents
              %p= _('Expected documents: %{expected_documents}') % { expected_documents: expected_documents }
            - if processed_documents && expected_documents
              - percentage = ((processed_documents / expected_documents.to_f) * 100).round(2)
              %p= _('Documents reindexed: %{processed_documents} (%{percentage}%%)') % { processed_documents: processed_documents, percentage: percentage }
              .progress
                .progress-bar.progress-bar-striped.bg-primary{ "aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => percentage, :role => "progressbar", :style => "width: #{percentage}%" }

        .sub-section
          %h4= _('Elasticsearch indexing restrictions')
          .form-group
            .form-check
              = f.check_box :elasticsearch_limit_indexing, class: 'form-check-input js-limit-checkbox'
              = f.label :elasticsearch_limit_indexing, class: 'form-check-label' do
                = _('Limit namespaces and projects that can be indexed')

          .form-group.js-limit-namespaces{ class: ('hidden' unless @application_setting.elasticsearch_limit_indexing) }
            = f.label :elasticsearch_namespace_ids, _('Namespaces to index'), class: 'label-bold'
            - if elasticsearch_too_many_namespaces?
              %p= _('Too many namespaces enabled. You will need to manage them via the console or the API.')
            - else
              = f.text_field :elasticsearch_namespace_ids, class: 'js-elasticsearch-namespaces', value: elasticsearch_namespace_ids, data: { selected: elasticsearch_objects_options(@application_setting.elasticsearch_limited_namespaces(true)).to_json }

          .form-group.js-limit-projects{ class: ('hidden' unless @application_setting.elasticsearch_limit_indexing) }
            = f.label :elasticsearch_project_ids, _('Projects to index'), class: 'label-bold'
            - if elasticsearch_too_many_projects?
              %p= _('Too many projects enabled. You will need to manage them via the console or the API.')
            - else
              = f.text_field :elasticsearch_project_ids, class: 'js-elasticsearch-projects', value: elasticsearch_project_ids, data: { selected: elasticsearch_objects_options(@application_setting.elasticsearch_limited_projects(true)).to_json }

        .sub-section
          %h4= _('Custom analyzers: language support')
          %h5
            = _('Chinese language support using')
            %a{ href: 'https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-smartcn.html' }
              = _('smartcn custom analyzer')
          .form-group
            .form-check
              = f.check_box :elasticsearch_analyzers_smartcn_enabled, class: 'form-check-input'
              = f.label :elasticsearch_analyzers_smartcn_enabled, class: 'form-check-label' do
                = _('Enable smartcn custom analyzer: Indexing')
          .form-group
            .form-check
              = f.check_box :elasticsearch_analyzers_smartcn_search, class: 'form-check-input', disabled: !Gitlab::CurrentSettings.elasticsearch_analyzers_smartcn_enabled?
              = f.label :elasticsearch_analyzers_smartcn_search, class: 'form-check-label' do
                = _('Enable smartcn custom analyzer: Search')
              .form-text.gl-text-gray-600
                = _('Please only enable search after installing the plugin, enabling indexing and recreating the index')
          %h5
            = _('Japanese language support using')
            %a{ href: 'https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-kuromoji.html' }
              = _('kuromoji custom analyzer')
          .form-group
            .form-check
              = f.check_box :elasticsearch_analyzers_kuromoji_enabled, class: 'form-check-input'
              = f.label :elasticsearch_analyzers_kuromoji_enabled, class: 'form-check-label' do
                = _('Enable kuromoji custom analyzer: Indexing')
          .form-group
            .form-check
              = f.check_box :elasticsearch_analyzers_kuromoji_search, class: 'form-check-input', disabled: !Gitlab::CurrentSettings.elasticsearch_analyzers_kuromoji_enabled?
              = f.label :elasticsearch_analyzers_kuromoji_search, class: 'form-check-label' do
                = _('Enable kuromoji custom analyzer: Search')
              .form-text.gl-text-gray-600
                = _('Please only enable search after installing the plugin, enabling indexing and recreating the index')

        .sub-section
          %h4= _('Elasticsearch AWS IAM credentials')
          .form-group
            .form-check
              = f.check_box :elasticsearch_aws, class: 'form-check-input'
              = f.label :elasticsearch_aws, class: 'form-check-label' do
                Using AWS hosted Elasticsearch with IAM credentials
          .form-group
            = f.label :elasticsearch_aws_region, 'AWS region', class: 'label-bold'
            = f.text_field :elasticsearch_aws_region, value: @application_setting.elasticsearch_aws_region, class: 'form-control'
            .form-text.text-muted
              = _('Region that Elasticsearch is configured')

          .form-group
            = f.label :elasticsearch_aws_access_key, _('AWS Access Key'), class: 'label-bold'
            = f.text_field :elasticsearch_aws_access_key, value: @application_setting.elasticsearch_aws_access_key, class: 'form-control'
            .form-text.text-muted
              = _('AWS Access Key. Only required if not using role instance credentials')

          - secret_access_key_label = @application_setting.elasticsearch_aws_secret_access_key.present? ? _('Enter new AWS Secret Access Key') : _('AWS Secret Access Key')
          .form-group
            = f.label :elasticsearch_aws_secret_access_key, secret_access_key_label, class: 'label-bold'
            = f.password_field :elasticsearch_aws_secret_access_key, autocomplete: 'new-password', class: 'form-control'
            .form-text.text-muted
              = _('AWS Secret Access Key. Only required if not using role instance credentials')

      = f.submit _('Save changes'), class: "gl-button btn btn-success", data: { qa_selector: 'submit_button' }
